{"version":3,"sources":["square.js","board.js","game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","row","col","board","sq","j","push","renderSquare","renderBoard","React","Component","calculateWinner","lines","length","a","b","c","squareCoordinates","Game","state","history","Array","fill","xIsNext","stepNumber","coordinates","slice","setState","concat","currentLocation","player","step","status","current","winner","moves","map","move","desc","location","weight","key","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be5072a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square(props) {\r\n\t//here, we set the attribute of the button\r\n\treturn (\t\t\t\t\t\t\t\t\t\r\n\t\t<button\t\t\t\t\t\t\t\r\n\t\t\tclassName=\"square\"\r\n\t\t\t//props.onClick and .value came from the Board class render square, also don't comment inside of the HTML tags lol\r\n\t\t\tonClick={props.onClick}\t\t\r\n\t\t>\t\t\t\t\t\t\t\t\t\r\n\t\t\t{props.value}\t\t\t\t\t\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './square.js';\r\n\r\n\r\nclass Board extends React.Component {\r\n\t//function that... renders... the square\r\n\trenderSquare(i) {\t\t\t\t\t\t\t\t\r\n\t\treturn (\t\t\t\t\t\t\t\t\t//calling funcs in React is \r\n\t\t<Square\t\t\t\t\t\t\t\t\t\t//<FuncName property={value} /> note the capitalization and the XML tag style\r\n\t\t\tvalue={this.props.squares[i]}\t\t\t//append the square value \t\t\t\r\n\t\t\tonClick={() => this.props.onClick(i) }\t//sets the square on click func to handleClick in this class\r\n\t\t/>\r\n\t\t);\r\n    }\r\n    \r\n    renderBoard(row, col) {\r\n        let board = [];\r\n        let sq = 0;\r\n        for (let i = 0; i < row; i += 1) {\r\n            let squares = [];\r\n            for (let j = 0; j < col; j += 1) {\r\n                squares.push(this.renderSquare(sq));\r\n                sq += 1;                \r\n            }\r\n            \r\n            board.push(\r\n                <div className=\"board-row\">\r\n                    {squares}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n\t//render() func, important in React classes, if the return HTML tags, that is\r\n\trender() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.renderBoard(3,3)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './board.js';\r\n\r\nclass Game extends React.Component {\r\n\t//create a constructor when having a class that's going to have class variables\r\n\tconstructor(props) {\r\n\t\t//always have super(props) when creating constructors\r\n\t\tsuper(props);\r\n\r\n\t\t//this creates a new history array to have all the moves in the\r\n\t\t//game save here\r\n\t\tthis.state = {\r\n\t\t\t//fill history with empty game grid array\r\n\t\t\thistory: [{\r\n\t\t\t\tsquares: Array(9).fill(null)\r\n\t\t\t}],\r\n\r\n\t\t\t//variable for which player ids going to move\r\n\t\t\txIsNext: true,\r\n\r\n\t\t\t//step counter, indicates what move are we in the game\r\n            stepNumber: 0,\r\n            \r\n            //variable holder for the coordinate if the square that has been clicked\r\n            coordinates: null,\r\n\t\t};\r\n\t}\r\n\r\n\t//handleClick function, handles the events when the square is clicked\r\n\thandleClick(i) {\r\n\t\t//gets the history, this is the initialization \r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\r\n\t\t//shows the current progress, showing the most recent move\r\n\t\tconst current = history[history.length - 1];\r\n\r\n\t\t//slice()'d the state so we can go back in the past. and treated it as immutable\t\t\t\t\t\t\t\t\t\r\n\t\tconst squares = current.squares.slice();\r\n\r\n\t\t//if there is a winner or the square is filled, do nothing\t\t\r\n\t\tif (calculateWinner(squares) || squares[i]) {\t\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//places the appropriate player when the square is clicked\r\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n\t\t//no idea where setState came from, im assuming its from this.state and \r\n\t\t//React has strict naming; setState = new values to this.state\t\r\n\t\tthis.setState({\t\r\n\t\t\t//combines the old history array to the new history array one, i think?\r\n\t\t\thistory: history.concat([{\r\n                squares: squares,\r\n                currentLocation: squareCoordinates(i),\r\n                player: (this.state.xIsNext? 'X' : 'O'),\r\n\t\t\t}]),\r\n\r\n\t\t\t//changes the player\t\t\t\t\t\t\r\n\t\t\txIsNext: !this.state.xIsNext,\t\r\n\t\t\t\r\n\t\t\t//indicates how many move are we in\r\n            stepNumber: history.length,\r\n            \r\n            coordinates: squareCoordinates(i),\r\n\t\t});\r\n\t}\r\n\r\n\t//function for history button onClick\r\n\tjumpTo(step) {\r\n\t\tthis.setState({\r\n\t\t\tstepNumber: step,\r\n\t\t\txIsNext: (step % 2) === 0,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[this.state.stepNumber];\r\n\t\tconst winner = calculateWinner(current.squares);\r\n\r\n\t\tconst moves = history.map((step, move) => {\r\n\t\t\tconst desc = move \r\n\t\t\t\t? 'Move#:' + move\r\n\t\t\t\t: 'Game Start';\r\n\r\n            let location = step.currentLocation\r\n                ? (`Location:${step.currentLocation}`)\r\n                : '';\r\n            let player = step.player\r\n                ? (`Player:${step.player}`)\r\n                : '';\r\n            let weight = (this.state.stepNumber === move)\r\n                ? 'selected-move'\r\n                : '';\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<li key={move}>\r\n                    <button \r\n                        onClick={() => this.jumpTo(move)}\r\n                        className={weight}\r\n                    >\r\n                        {`${desc} ${player} ${location}`}\r\n                    </button>\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t})\r\n\r\n\t\tlet status;\r\n\t\tif (winner) {\r\n\t\t\tstatus = 'Winner: ' + winner; \r\n        } else if (this.state.stepNumber === 9) {\r\n            status = 'Draw. No one won.';\r\n        } \r\n        else {\r\n\t\t\tstatus = 'Next player: ' + (this.state.xIsNext? 'X' : 'O');\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t<Board\r\n\t\t\t\t\tsquares = {current.squares}\r\n\t\t\t\t\tonClick = {(i) => this.handleClick(i)} \r\n\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nfunction squareCoordinates(value) {\r\n    const coordinates = [\r\n        \"1,1\",\r\n        \"1,2\",\r\n        \"1,3\",\r\n        \"2,1\",\r\n        \"2,2\",\r\n        \"2,3\",\r\n        \"3,1\",\r\n        \"3,2\",\r\n        \"3,3\",\r\n    ];\r\n\r\n    return coordinates[value];\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './game.js';\r\n\r\n\r\nReactDOM.render(\r\n\t<Game />,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}